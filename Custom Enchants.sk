function Enchant_Set(name: text, type: text, rarity: text, desc: text, max: integer):
    set {_id} to {_name} in lower case
    replace all " " in {_id} with "_"
    set {enchants::%{_id}%::name} to {_name}
    set {enchants::%{_id}%::type} to {_type}
    set {enchants::%{_id}%::desc} to {_desc}
    set {enchants::%{_id}%::max} to {_max}
    set {enchants::%{_id}%::rarity} to {_rarity}
    add {_id} to {enchants.rarity::%{_rarity}%::*}

function List_Print(node: string, layer: string="    ", list: string="", currentlayer: string="") :: strings:
    # Prints a list
    # example
    # set {listname::*} to online players
    # send List_Print("listname")
    #
    # do not touch list and current layer
    # layer is customizeable and is defaulted to 4 spaces 
    set {_returnarr::1} to "%{_currentlayer}%[%{_node}%]"
    set {_t} to 1
    loop indices of {%{_list}%%{_node}%::*}:
        add 1 to {_t}
        set {_returnarr::%{_t}%} to "%{_currentlayer}%%{_layer}%%loop-value%:%{%{_list}%%{_node}%::%loop-value%}%" if {%{_list}%%{_node}%::%loop-value%} is set
        if {%{_list}%%{_node}%::%loop-value%::*} is set:
            loop List_Print(loop-value, {_layer}, "%{_list}%%{_node}%::", "%{_currentlayer}%%{_layer}%"):
                add 1 to {_t}
                set {_returnarr::%{_t}%} to loop-value-2
    return {_returnarr::*}


function Enchant_Chance(lore: text, type: text) :: string:
    set {_l::*} to {_lore} split at "||"
    loop {_l::*}:
        if loop-value contains "%{_type}% Chance":
            set {_chance} to regex replace "[A-Za-z]" with "" in loop-value
            replace all "%%" and " " in {_chance} with ""
            return {_chance}
                

function Enchant_GetID(name: string) :: string:
    set {_name} to uncolored {_name}
    replace all " 1" and " 2" and " 3" and " 4" and " 5" in {_name} with ""
    replace all " " in {_name} with "_"
    return {_name} in lower case
on load:
    wait 1 tick
    set {enchant.color::common} to "&7"
    set {enchant.color::uncommon} to "&a"
    set {enchant.color::rare} to "&b"
    set {enchant.color::epic} to "&d"
    set {enchant.color::legendary} to "&7"
    delete {enchants.rarity::common::*}
    delete {enchants.rarity::uncommon::*}
    delete {enchants.rarity::rare::*}
    Enchant_Set("Telepathy", "Tools", "rare", "Will send mined items directly to your inventory", 1)
    Enchant_Set("Haste", "Tools", "rare", "Gives you haste while holding the tool", 3)
    delete {enchants.rarity::epic::*}
    delete {enchants.rarity::legendary::*}

command /ce [<text>]:
    trigger:
        if arg is "list":
            set {_menu} to chest inventory with 3 rows named "Enchant List"
            set slot 0, 9 and 18 of {_menu} to red glass pane named "&cBack"
            set slot 10 of {_menu} to diamond helmet named "&b&lHelmet Enchants"
            set slot 11 of {_menu} to diamond boots named "&b&lBoots Enchants"
            set slot 12 of {_menu} to diamond chestplate named "&b&lArmor Enchants"
            set slot 13 of {_menu} to bow named "&b&lBow Enchants"
            set slot 14 of {_menu} to diamond sword named "&b&lSword Enchants"
            set slot 15 of {_menu} to diamond pickaxe named "&b&lPickaxe Enchants"
            set slot 16 of {_menu} to diamond shovel named "&b&lTools Enchants"
            open {_menu} to player
            set {inventory::%player's uuid%} to "ce.list"
        else:
            set {_menu} to chest inventory with 6 rows named "Custom Enchants"
            set slot 11 of {_menu} to enchanted book named "&7&lCommon Enchant" lored "&7Cost: &a10 XP levels"
            set slot 12 of {_menu} to enchanted book named "&a&lUnCommon Enchant" lored "&7Cost: &a30 XP levels"
            set slot 13 of {_menu} to enchanted book named "&b&lRare Enchant" lored "&7Cost: &a40 XP levels"
            set slot 14 of {_menu} to enchanted book named "&d&lEpic Enchant" lored "&7Cost: &a50 XP levels"
            set slot 15 of {_menu} to enchanted book named "&6&lLegendary Enchant" lored "&7Cost: &a65 XP levels"
            set slot 31 of {_menu} to nether star named "&b&lEnchant List" lored "&7Click to view the enchant list"
            set slot 39 of {_menu} to black dye named "&8&lChance Reroll" lored "&7Cost: &61,000$||&7Reroll the chances of an enchant"
            set slot 40 of {_menu} to paper named "&f&lItem Protector" lored "&7Cost: &610,000$||&7Protect an item from breaking"
            set slot 41 of {_menu} to sugar named "&a&lSuccess Boost" lored "&7Cost: &61,000$||&7Improve the success chance of an enchant"
            open {_menu} to player
            set {inventory::%player's uuid%} to "ce.main"

on rightclick with enchanted book:
    set {_id} to Enchant_GetID(name of event-item)
    "%all indices of {enchants::*}%" contains {_id}
    set {_temp::*} to uncolored name of event-item split at " "
    set {_level} to "%last element of {_temp::*}%"
    set {_menu} to chest inventory with 3 rows named "Enchanting"
    loop integers from 0 to 26:
        set slot loop-value of {_menu} to black glass pane named " "
    set slot 4 of {_menu} to anvil named "&b&lEnchant" lored "&7Place the item below||&7Click to enchant the item"
    set slot 13 of {_menu} to air
    set slot 0, 9 and 18 of {_menu} to red glass pane named "&cCancel"
    open {_menu} to player
    set {inventory::%player's uuid%} to "ce.enchant.%{_id}%.%{_level}%"
    set {enchant.item::%player's uuid%} to player's tool
    set {enchant.lore::%player's uuid%} to uncolored lore of player's tool
    remove 1 of player's tool from player's tool
    
on break:
    set {_item} to player's tool
    set {_t::*} to uncolored lore of {_item} split at "||"
    if "%line size of {_t::*} of lore of {_item}%" isn't "<none>":
        loop {_t::*}:
            set {_id} to Enchant_GetID(loop-value)
            {_id} is "Telepathy"
            give event-block to player
            cancel drops
            stop

        
every 3 seconds:
    loop all players:
        set {_item} to loop-player's tool
        set {_t::*} to uncolored lore of {_item} split at "||"
        if "%line size of {_t::*} of lore of {_item}%" isn't "<none>":
            loop {_t::*}:
                set {_id} to Enchant_GetID(loop-value-2)
                {_id} is "haste"
                set {_temp::*} to loop-value-2 split at " "
                set {_level} to "%last element of {_temp::*}%" parsed as integer
                apply potion of haste of tier {_level} to the loop-player for 3 seconds
                stop

on inventory click:
    if {inventory::%player's uuid%} contains "ce":
        if {inventory::%player's uuid%} is "ce.main":
            cancel event
            if event-slot is enchanted book:
                set {_cost} to uncolored line 1 of lore of event-slot
                replace all "Cost: " and " Xp levels" in {_cost} with ""
                set {_cost} to {_cost} parsed as integer
                if player's level >= {_cost}:
                    set {_rarity} to uncolored name of event-slot in lower case
                    replace all " enchant" in {_rarity} with ""
                    set {_id} to a random element out of {enchants.rarity::%{_rarity}%::*}
                    set {_level} to a random integer between 1 and {enchants::%{_id}%::max}
                    set {_success} to a random integer between 1 and 100
                    set {_break} to a random integer between 1 and 100
                    give player enchanted book named "%{enchant.color::%{_rarity}%}%&l%{enchants::%{_id}%::name}% %{_level}%" lored "&7Drag and drop on an item||||&8%{enchants::%{_id}%::desc}%||||&7Enchant Type: &b%{enchants::%{_id}%::type}%||||&a%{_success}%%% Success Chance||&4%{_break}%%% Break Chance"
                    reduce player's level by {_cost}
                else:
                    send "&cYou need to be level &7%{_cost}% &cto do this"
            else if event-slot is sugar:
                set {_cost} to uncolored line 1 of lore of event-slot
                replace all "Cost: " and "," and "$" in {_cost} with ""
                set {_cost} to {_cost} parsed as integer
                if player's balance >= {_cost}:
                    remove {_cost} from player's balance
                    set {_boost} to a random integer from 1 to 5
                    give player sugar named "&a&lSuccess Boost &7(&a+%{_boost}%&7)"
                else:
                    send "&cYou need &7%{_cost}%&c$ to buy this"
            else if event-slot is paper or black dye:
                set {_cost} to uncolored line 1 of lore of event-slot
                replace all "Cost: " and "," and "$" in {_cost} with ""
                set {_cost} to {_cost} parsed as integer
                if player's balance >= {_cost}:
                    remove {_cost} from player's balance
                    give player event-slot named name of event-slot
                else:
                    send "&cYou need &7%{_cost}%&c$ to buy this"
            else if event-slot is a nether star:
                make player execute command "/ce list"
        else if {inventory::%player's uuid%} contains "ce.list":
            if {inventory::%player's uuid%} is "ce.list":
                if event-slot is red glass pane:
                    make player execute "/ce"
                else if event-slot isn't air:
                    set {_type} to uncolored name of event-slot
                    replace all " Enchants" in {_type} with ""
                    set {_menu} to chest inventory with 3 rows named "%{_type}% Enchants"
                    set slot 0, 9 and 18 of {_menu} to red glass pane named "&cBack"
                    loop all indices of {enchants::*}:
                        if {enchants::%loop-value%::type} = {_type}:
                            add 1 to {_slot}
                            if {_slot} is 9 or 18:
                                add 1 to {_slot}
                            set {_color} to {enchant.color::%{enchants::%loop-value%::rarity}%}
                            set slot {_slot} of {_menu} to enchanted book named "%{_color}%&l%{enchants::%loop-value%::name}%" lored "&8%{enchants::%loop-value%::desc}%||||&7Max Level: &e%{enchants::%loop-value%::max}%"
                    open {_menu} to player
                    set {inventory::%player's uuid%} to "ce.list.%{_type}%"
            else:
                if event-slot is red glass pane:
                    make player execute "/ce list"
        else if {inventory::%player's uuid%} contains "ce.enchant":
            if event-inventory isn't player's inventory:
                index of event-slot isn't 13
                cancel event
            if event-slot is red glass pane:
                close player's inventory
            else if event-slot is an anvil:
                if event-slot isn't air:
                    set {_temp::*} to {inventory::%player's uuid%} split at "."
                    set {_id.book} to {_temp::3}
                    set {_level.book} to {_temp::4} parsed as integer
                    set {_item} to slot 13 of current inventory
                    set {_id.item} to Enchant_GetID(name of {_item})
                    if {_item} is an enchanted book:
                        if {_id.book} = {_id.item}:
                            set {_temp::*} to uncolored name of {_item} split at " "
                            set {_level.item} to "%last element of {_temp::*}%" parsed as integer
                            if {enchants::%{_id.item}%::max} > {_level.item}:
                                if {_level.book} = {_level.item}:
                                    add 1 to {_level.item}
                                    set {_color} to {enchant.color::%{enchants::%{_id.item}%::rarity}%}
                                    set {_success} to a random integer between 1 and 100
                                    set {_break} to a random integer between 1 and 100
                                    set {_item} to {_item} named "%{_color}%&l%{enchants::%{_id.item}%::name}% %{_level.item}%" lored "&7Drag and drop on an item||||&8%{enchants::%{_id.item}%::desc}%||||&7Enchant Type: &b%{enchants::%{_id.item}%::type}%||||&a%{_success}%%% Success Chance||&4%{_break}%%% Break Chance"
                                    send "&aSuccessfully combined enchants!"
                                    close player's inventory
                                    give {_item} to player
                                else:
                                    send "&cThe enchants needs to be of the same level in order to combine"
                            else:
                                send "&cThis enchant is already maxed"
                        else:
                            send "&cYou can't combine different enchants"
                    else:
                        set {_type} to {enchants::%{_id.book}%::type}
                        if {_type} is "Tools":
                            {_item} is a pickaxe or axe or shovel or hoe or sword
                            set {_c} to true
                        else if {_type} is "Pickaxe":
                            {_item} is a pickaxe
                            set {_c} to true
                        else if {_type} is "Sword":
                            {_item} is a sword
                            set {_c} to true
                        else if {_type} is "Armor":
                            {_item} is a helmet or chestplate or leggings or boots
                            set {_c} to true
                        else if {_type} is "Helmet":
                            {_item} is a helmet
                            set {_c} to true
                        else if {_type} is "Boots":
                            {_item} is boots
                            set {_c} to true
                        else if {_type} is "Bow":
                            {_item} is a bow
                            set {_c} to true
                        if {_c} is true:
                            set {_temp::*} to uncolored name of {_item} split at " "
                            set {_level.item} to "%last element of {_temp::*}%" parsed as integer
                            set {_t::*} to uncolored lore of {_item} split at "||"
                            if "%line size of {_t::*} of lore of {_item}%" isn't "<none>":
                                loop {_t::*}:
                                    add 1 to {_line}
                                    set {_id.enchant} to Enchant_GetID(loop-value)
                                    if {_id.enchant} is {_id.book}:
                                        set {_c2} to true
                                        set {_temp::*} to loop-value split at " "
                                        set {_level.enchant} to "%last element of {_temp::*}%" parsed as integer
                                        if {enchants::%{_id.enchant}%::max} > {_level.enchant}:
                                            set {_success} to Enchant_Chance({enchant.lore::%player's uuid%}, "Success") parsed as integer
                                            set {_success} to "%{_success}%" parsed as integer
                                            set {_s} to a random integer between 1 and 100
                                            if {_s} <= {_success}:
                                                add 1 to {_level.enchant}
                                                set {_color} to {enchant.color::%{enchants::%{_id.enchant}%::rarity}%}
                                                set line {_line} of lore of {_item} to "%{_color}%&l%{enchants::%{_id.enchant}%::name}% %{_level.enchant}%"
                                                send "&aSuccessfully enchanted an item!"
                                                delete {enchant.item::%player's uuid%}
                                                set slot 13 of current inventory to air
                                                wait 1 tick
                                                close player's inventory
                                                give {_item} to player
                                            else:
                                                set {_break} to Enchant_Chance({enchant.lore::%player's uuid%}, "Break")
                                                set {_break} to "%{_break}%" parsed as integer
                                                delete {enchant.item::%player's uuid%}
                                                set {_b} to a random integer between 1 and 100
                                                if {_b} <= {_break}:
                                                    send "&4Your item broke while enchanting!"
                                                else:
                                                    send "&cEnchanting failed"
                                                    give {_item} to player
                                                set slot 13 of current inventory to air
                                                close player's inventory

                                        else:
                                            send "&cYou can't combine maxed enchants"
                                        stop
                                if {_c2} isn't true:
                                    set {_success} to Enchant_Chance({enchant.lore::%player's uuid%}, "Success") parsed as integer
                                    set {_success} to "%{_success}%" parsed as integer
                                    set {_s} to a random integer between 1 and 100
                                    if {_s} <= {_success}:
                                        delete {enchant.item::%player's uuid%}
                                        set slot 13 of current inventory to air
                                        set {_color} to {enchant.color::%{enchants::%{_id.book}%::rarity}%}
                                        set line (size of {_t::*} + 1) of lore of {_item} to "%{_color}%&l%{enchants::%{_id.book}%::name}% %{_level.book}%"
                                        send "&aSuccessfully enchanted an item!"
                                        wait 1 tick
                                        close player's inventory
                                        give {_item} to player
                                    else:
                                        set {_break} to Enchant_Chance({enchant.lore::%player's uuid%}, "Break")
                                        set {_break} to "%{_break}%" parsed as integer
                                        delete {enchant.item::%player's uuid%}
                                        set slot 13 of current inventory to air
                                        set {_b} to a random integer between 1 and 100
                                        if {_b} <= {_break}:
                                            send "&4Your item broke while enchanting!"
                                        else:
                                            send "&cEnchanting failed"
                                            give {_item} to player
                                        wait 1 tick
                                        close player's inventory
                            else:
                                set {_success} to Enchant_Chance({enchant.lore::%player's uuid%}, "Success")
                                set {_success} to "%{_success}%" parsed as integer
                                set {_s} to a random integer between 1 and 100
                                send "Success: %{_success}% > %{_s}%"
                                if {_success} > {_s}:
                                    delete {enchant.item::%player's uuid%}
                                    set slot 13 of current inventory to air
                                    set {_color} to {enchant.color::%{enchants::%{_id.book}%::rarity}%}
                                    set lore of {_item} to "%{_color}%&l%{enchants::%{_id.book}%::name}% %{_level.book}%"
                                    send "&aSuccessfully enchanted an item!"
                                    wait 1 tick
                                    close player's inventory
                                    give {_item} to player
                                else:
                                    set {_break} to Enchant_Chance({enchant.lore::%player's uuid%}, "Break")
                                    set {_break} to "%{_break}%" parsed as integer
                                    delete {enchant.item::%player's uuid%}
                                    set slot 13 of current inventory to air
                                    set {_b} to a random integer between 1 and 100
                                    send "Break: %{_break}% > %{_b}%"
                                    if {_break} > {_b}:
                                        send "&4Your item broke while enchanting!"
                                    else:
                                        send "&cEnchanting failed"
                                        give {_item} to player
                                    wait 1 tick
                                    close player's inventory
                        else:
                            send "&cThis enchant can only be placed on &7%{_type}%"
                else:
                    send "&cYou need to place an item before enchanting!"


command /test:
    permission: *
    trigger:
        send List_Print("enchants")

on inventory close:
    if {inventory::%player's uuid%} contains "ce.enchant":
        give slot 13 of current inventory to player
        give {enchant.item::%player's uuid%} to player
        delete {enchant.item::%player's uuid%}
        delete {enchant.lore::%player's uuid%}
    delete {inventory::%player's uuid%}
